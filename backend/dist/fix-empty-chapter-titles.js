const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function fixEmptyChapterTitles() {
  try {
    console.log('üîß Correction des titres vides Anatomie PCEM2...\n');

    const anatomieSubject = await prisma.subject.findFirst({
      where: {
        title: { contains: 'Anatomie', mode: 'insensitive' },
        semester: 'PCEM2'
      },
      include: {
        chapters: {
          include: {
            _count: { select: { questions: true } }
          }
        }
      }
    });

    if (!anatomieSubject) {
      console.log('‚ùå Sujet Anatomie PCEM2 non trouv√©');
      return;
    }

    console.log(`üìö Sujet: ${anatomieSubject.title}`);
    console.log(`üìñ Chapitres totaux: ${anatomieSubject.chapters.length}\n`);

    // Mapping des titres attendus bas√© sur le nombre de questions
    const titleMapping = {
      13: { questions: 20, title: 'Chapitre 1 ‚Äì Organisation g√©n√©rale du syst√®me nerveux' },
      14: { questions: 20, title: 'Chapitre 2 ‚Äì Moelle √©pini√®re et voies nerveuses' },
      15: { questions: 20, title: 'Chapitre 3 ‚Äì Tronc c√©r√©bral et nerfs cr√¢niens' },
      16: { questions: 20, title: 'Chapitre 4 ‚Äì Cervelet et coordination motrice' },
      17: { questions: 20, title: 'Chapitre 5 ‚Äì Dienc√©phale (Thalamus, Hypothalamus, √âpithalamus, M√©tathalamus)' },
      18: { questions: 20, title: 'Chapitre 6 ‚Äì T√©lenc√©phale et cortex c√©r√©bral' },
      19: { questions: 20, title: 'Chapitre 7 ‚Äì Syst√®me limbique et formation r√©ticul√©e' },
      20: { questions: 20, title: 'Chapitre 8 ‚Äì Syst√®me nerveux p√©riph√©rique et autonome' },
      21: { questions: 20, title: 'Chapitre 9 ‚Äì Vascularisation du syst√®me nerveux' },
      22: { questions: 20, title: 'Chapitre 10 ‚Äì M√©ninges, Ventricules et Liquide C√©r√©brospinal' }
    };

    let fixedCount = 0;

    for (const chapter of anatomieSubject.chapters) {
      // Si le chapitre a un titre vide ou tr√®s court
      if (!chapter.title || chapter.title.trim().length < 3) {
        const questionCount = chapter._count.questions;
        console.log(`üìÑ Chapitre vide trouv√©: "${chapter.title}" (${questionCount} questions)`);

        // Essayer de trouver le titre bas√© sur le nombre de questions
        let newTitle = null;

        // Chercher dans le mapping des chapitres emoji
        for (const [chapNum, info] of Object.entries(titleMapping)) {
          if (questionCount === info.questions) {
            // V√©rifier si ce titre n'est pas d√©j√† utilis√©
            const titleExists = anatomieSubject.chapters.some(
              c => c.id !== chapter.id && c.title === info.title
            );

            if (!titleExists) {
              newTitle = info.title;
              break;
            }
          }
        }

        if (newTitle) {
          await prisma.chapter.update({
            where: { id: chapter.id },
            data: { title: newTitle }
          });
          console.log(`   ‚úÖ Titre mis √† jour: "${newTitle}"`);
          fixedCount++;
        } else {
          console.log(`   ‚ö†Ô∏è  Impossible de d√©terminer le titre (${questionCount} questions)`);
        }
      }
    }

    console.log(`\n‚úÖ ${fixedCount} titres corrig√©s!\n`);

    await prisma.$disconnect();
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    await prisma.$disconnect();
  }
}

fixEmptyChapterTitles();
