import { PrismaClient } from '@prisma/client';
import * as fs from 'fs';
import * as path from 'path';

const prisma = new PrismaClient();

interface QuizOption {
  text: string;
  isCorrect: boolean;
  justification?: string;
}

interface ParsedQuestion {
  questionText: string;
  options: QuizOption[];
  explanation?: string;
}

interface ChapterData {
  title: string;
  questions: ParsedQuestion[];
}

/**
 * Parse un fichier quiz et extrait toutes les questions
 */
function parseQuizFile(filePath: string): ChapterData {
  const content = fs.readFileSync(filePath, 'utf-8');
  const lines = content.split('\n');

  let chapterTitle = '';
  const questions: ParsedQuestion[] = [];

  let currentQuestion: ParsedQuestion | null = null;
  let currentQuestionText = '';

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();

    // Extraire le titre du chapitre (chercher n'importe quelle ligne avec "Chapitre" dans les 5 premi√®res lignes)
    if (!chapterTitle && i < 5 && line.match(/Chapitre\s+\d+/i)) {
      // Extraire tout ce qui est apr√®s "Chapitre X"
      const match = line.match(/(Chapitre\s+\d+[^:]*\s*[:\-‚Äì‚Äî]\s*)(.+)/i);
      if (match) {
        // Garder le titre complet avec "Chapitre X : ..."
        const chapNum = match[1].match(/\d+/)?.[0];
        chapterTitle = `Chapitre ${chapNum} : ${match[2].trim()}`;
      } else {
        // Si pas de s√©parateur, prendre toute la ligne apr√®s les caract√®res sp√©ciaux
        chapterTitle = line.replace(/^[^\w\s√Ä-√ø]+\s*/, '').trim();
      }
      continue;
    }

    // D√©tecter une nouvelle question (ligne commen√ßant par un num√©ro + emoji)
    // Format 1: "1Ô∏è‚É£ Question : ..." (avec "Question :")
    // Format 2: "1Ô∏è‚É£ D√©finition g√©n√©rale" (titre de section, question sur ligne suivante)
    const questionMatch = line.match(/^(\d+)Ô∏è‚É£\s*Question\s*:\s*(.+)/);
    if (questionMatch) {
      // Sauvegarder la question pr√©c√©dente
      if (currentQuestion) {
        questions.push(currentQuestion);
      }

      // Cr√©er une nouvelle question
      currentQuestionText = questionMatch[2].trim();
      currentQuestion = {
        questionText: currentQuestionText,
        options: [],
        explanation: undefined
      };
      continue;
    }

    // Format alternatif: ligne commen√ßant par "Question :" sans num√©ro emoji
    const questionMatch2 = line.match(/^Question\s*:\s*(.+)/);
    if (questionMatch2) {
      // Sauvegarder la question pr√©c√©dente
      if (currentQuestion) {
        questions.push(currentQuestion);
      }

      // Cr√©er une nouvelle question
      currentQuestionText = questionMatch2[1].trim();
      currentQuestion = {
        questionText: currentQuestionText,
        options: [],
        explanation: undefined
      };
      continue;
    }

    // D√©tecter une option de r√©ponse (A., B., C., etc.)
    const optionMatch = line.match(/^([A-E])\.\s*(.+)/);
    if (optionMatch) {
      // Si on trouve une option A. mais qu'il n'y a pas de question en cours,
      // cr√©er une question avec le dernier titre de section trouv√©
      if (!currentQuestion) {
        // Chercher le dernier emoji title dans les lignes pr√©c√©dentes
        let sectionTitle = 'Question sans titre';
        for (let j = Math.max(0, i - 5); j < i; j++) {
          const prevLine = lines[j].trim();
          const sectionMatch = prevLine.match(/^(\d+)Ô∏è‚É£\s*(.+)/);
          if (sectionMatch) {
            sectionTitle = sectionMatch[2].trim();
          }
        }

        currentQuestion = {
          questionText: sectionTitle,
          options: [],
          explanation: undefined
        };
      }

      const optionText = optionMatch[2];

      // V√©rifier si c'est une bonne r√©ponse (‚úîÔ∏è) ou fausse (‚ùå)
      const isCorrect = optionText.includes('‚úîÔ∏è');
      const isWrong = optionText.includes('‚ùå');

      if (isCorrect) {
        // R√©ponse correcte
        const cleanText = optionText.replace('‚úîÔ∏è', '').trim();
        currentQuestion.options.push({
          text: cleanText,
          isCorrect: true
        });
      } else if (isWrong) {
        // R√©ponse fausse avec justification
        const parts = optionText.split('‚ùå');
        const cleanText = parts[0].trim();

        // Extraire la justification apr√®s le "‚Äî"
        let justification: string | undefined;
        if (parts[1]) {
          const justParts = parts[1].split('‚Äî');
          if (justParts[1]) {
            justification = justParts[1].trim();
          }
        }

        currentQuestion.options.push({
          text: cleanText,
          isCorrect: false,
          justification
        });
      }
      continue;
    }

    // D√©tecter le commentaire explicatif (ligne avec üí¨)
    const commentMatch = line.match(/^üí¨\s*(.+)/);
    if (commentMatch && currentQuestion) {
      currentQuestion.explanation = commentMatch[1].trim();
      continue;
    }

    // D√©tecter "Justification :" qui marque la fin d'une question et stocke l'explication
    const justificationMatch = line.match(/^Justification\s*:\s*(.+)/);
    if (justificationMatch && currentQuestion) {
      currentQuestion.explanation = justificationMatch[1].trim();

      // Sauvegarder la question actuelle
      if (currentQuestion.options.length > 0) {
        questions.push(currentQuestion);
      }
      currentQuestion = null; // Reset pour la prochaine question
      continue;
    }
  }

  // Ajouter la derni√®re question
  if (currentQuestion) {
    questions.push(currentQuestion);
  }

  return {
    title: chapterTitle,
    questions
  };
}

/**
 * R√©cup√®re tous les fichiers .txt dans un dossier
 */
function getQuizFiles(dirPath: string): string[] {
  if (!fs.existsSync(dirPath)) {
    console.log(`‚ö†Ô∏è  Dossier non trouv√©: ${dirPath}`);
    return [];
  }

  const files = fs.readdirSync(dirPath);
  return files
    .filter(file => file.endsWith('.txt'))
    .map(file => path.join(dirPath, file));
}

/**
 * Importe les quiz d'une mati√®re
 */
async function importSubjectQuizzes(
  subjectTitle: string,
  semester: string,
  quizFilesPath: string,
  description?: string
) {
  console.log(`\nüìö Importation de ${subjectTitle} (${semester})...`);

  // Cr√©er ou r√©cup√©rer la mati√®re
  let subject = await prisma.subject.findFirst({
    where: { title: subjectTitle, semester }
  });

  if (!subject) {
    subject = await prisma.subject.create({
      data: {
        title: subjectTitle,
        semester,
        description: description || `Mati√®re ${subjectTitle} pour ${semester}`,
        tags: [subjectTitle.toLowerCase(), semester.toLowerCase()],
        totalQCM: 0 // Sera mis √† jour apr√®s
      }
    });
    console.log(`‚úÖ Mati√®re cr√©√©e: ${subject.title}`);
  } else {
    console.log(`‚úÖ Mati√®re existante: ${subject.title}`);
  }

  // R√©cup√©rer tous les fichiers quiz
  const quizFiles = getQuizFiles(quizFilesPath);
  console.log(`üìù ${quizFiles.length} fichiers trouv√©s`);

  let totalQuestions = 0;

  for (const quizFile of quizFiles) {
    const fileName = path.basename(quizFile);
    console.log(`\n  üìÑ Traitement: ${fileName}`);

    try {
      const chapterData = parseQuizFile(quizFile);

      if (!chapterData.title) {
        console.log(`    ‚ö†Ô∏è  Titre de chapitre manquant, skip`);
        continue;
      }

      // Cr√©er ou r√©cup√©rer le chapitre
      let chapter = await prisma.chapter.findFirst({
        where: {
          subjectId: subject.id,
          title: chapterData.title
        }
      });

      if (!chapter) {
        // Compter les chapitres existants pour l'orderIndex
        const chaptersCount = await prisma.chapter.count({
          where: { subjectId: subject.id }
        });

        chapter = await prisma.chapter.create({
          data: {
            subjectId: subject.id,
            title: chapterData.title,
            orderIndex: chaptersCount,
            description: `${chapterData.questions.length} questions`
          }
        });
        console.log(`    ‚úÖ Chapitre cr√©√©: ${chapter.title}`);
      } else {
        console.log(`    ‚úÖ Chapitre existant: ${chapter.title}`);
      }

      // Importer les questions
      for (let i = 0; i < chapterData.questions.length; i++) {
        const q = chapterData.questions[i];

        await prisma.question.create({
          data: {
            chapterId: chapter.id,
            questionText: q.questionText,
            options: q.options as any, // Json type
            explanation: q.explanation,
            difficulty: 'FACILE', // Par d√©faut, peut √™tre ajust√© manuellement
            orderIndex: i
          }
        });
      }

      console.log(`    ‚úÖ ${chapterData.questions.length} questions import√©es`);
      totalQuestions += chapterData.questions.length;

    } catch (error) {
      console.error(`    ‚ùå Erreur lors du traitement de ${fileName}:`, error);
    }
  }

  // Mettre √† jour le nombre total de questions
  await prisma.subject.update({
    where: { id: subject.id },
    data: { totalQCM: totalQuestions }
  });

  console.log(`\n‚úÖ ${subjectTitle} import√©: ${totalQuestions} questions au total\n`);
}

/**
 * Fonction principale d'importation
 */
async function main() {
  console.log('üöÄ D√©but de l\'importation des quiz...\n');

  // Chemin relatif depuis le dossier backend (fonctionnera en local et sur Render)
  const baseDir = path.join(__dirname, '..', 'data', 'quiz');

  try {
    // ===== PCEM1 - S International =====
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üìñ PCEM1 - S International');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

    await importSubjectQuizzes(
      'Anatomie',
      'PCEM1',
      path.join(baseDir, 'pcem1', 'anatomie'),
      'Anatomie du membre sup√©rieur et inf√©rieur'
    );

    await importSubjectQuizzes(
      'Histologie',
      'PCEM1',
      path.join(baseDir, 'pcem1', 'histo'),
      'Histologie des tissus et organes'
    );

    await importSubjectQuizzes(
      'Physiologie',
      'PCEM1',
      path.join(baseDir, 'pcem1', 'physio'),
      'Physiologie cellulaire et des syst√®mes'
    );

    // ===== PCEM2 - S International =====
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üìñ PCEM2 - S International');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

    await importSubjectQuizzes(
      'Anatomie',
      'PCEM2',
      path.join(baseDir, 'pcem2', 'anatomie'),
      'Anatomie niveau PCEM2'
    );

    await importSubjectQuizzes(
      'Histologie',
      'PCEM2',
      path.join(baseDir, 'pcem2', 'histo'),
      'Histologie niveau PCEM2'
    );

    await importSubjectQuizzes(
      'Physiologie',
      'PCEM2',
      path.join(baseDir, 'pcem2', 'physio'),
      'Physiologie niveau PCEM2'
    );

    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('‚úÖ IMPORTATION TERMIN√âE AVEC SUCC√àS !');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'importation:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter l'importation
main()
  .catch((error) => {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  });
