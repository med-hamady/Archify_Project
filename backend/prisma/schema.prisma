// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  passwordHash      String
  name              String
  semester          String
  role              UserRole            @default(STUDENT)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  subscriptions     Subscription[]
  comments          Comment[]
  progresses        Progress[]
  passwordResetTokens PasswordResetToken[]
  payments          Payment[]
}


model Course {
  id          String    @id @default(cuid())
  title       String
  description String?
  semester    String
  tags        String[]
  createdAt   DateTime    @default(now())
  isPremium   Boolean     @default(false)
  lessons     Lesson[]
  views       Int         @default(0)
}

model Lesson {
  id           String    @id @default(cuid())
  course       Course    @relation(fields: [courseId], references: [id])
  courseId     String
  title        String
  type         LessonType
  durationSec  Int       @default(0)
  vimeoId      String?   
  youtubeId    String?   
  pdfUrl       String?   
  // Video upload fields
  videoUrl     String?   // Local video file path
  videoSize    Int?      // File size in bytes
  videoType    String?   // MIME type (video/mp4, etc.)
  uploadedAt   DateTime? // Upload timestamp
  isPremium    Boolean   @default(false)
  requiresVideoSubscription Boolean @default(false)
  requiresDocumentSubscription Boolean @default(false)
  orderIndex   Int       @default(0)
  views        Int       @default(0)
  createdAt    DateTime  @default(now())
  lessonAssets LessonAsset[]
  comments     Comment[]
  progresses   Progress[]
  quizzes      Quiz[]

  @@index([courseId, orderIndex], map: "lessons_course_order_idx")
}

model LessonAsset {
  id       String @id @default(cuid())
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId String
  kind     AssetKind
  url      String
  title    String
}

model Comment {
  id        String   @id @default(cuid())
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  content   String
  status    CommentStatus @default(VISIBLE)
  createdAt DateTime @default(now())
}

model SubscriptionPlan {
  id           String  @id @default(cuid())
  name         String
  description  String?
  type         SubscriptionType
  interval     String
  priceCents   Int
  currency     String  @default("MRU")
  features     String[]
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  subscriptions Subscription[]
}

model Subscription {
  id         String              @id @default(cuid())
  user       User                @relation(fields: [userId], references: [id])
  userId     String
  plan       SubscriptionPlan    @relation(fields: [planId], references: [id])
  planId     String
  status     SubscriptionStatus  @default(ACTIVE)
  startAt    DateTime
  endAt      DateTime
  cancelAt   DateTime?
  createdAt  DateTime           @default(now())
  payments   Payment[]
}

model Payment {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  subscription   Subscription?  @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
  planId         String        // ID du plan acheté
  provider       PaymentProvider
  providerRef    String        // Numéro de transaction
  phoneNumber    String        // Numéro de téléphone du payeur
  amountCents    Int
  currency       String        @default("MRU")
  status         PaymentStatus @default(PENDING)
  screenshotUrl  String?       // URL de la capture d'écran
  adminNotes     String?       // Notes de l'admin
  validatedBy    String?       // ID de l'admin qui a validé
  validatedAt    DateTime?     // Date de validation
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Progress {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  String
  status    ProgressStatus @default(VIEWED)
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

model Coupon {
  id             String   @id @default(cuid())
  code           String   @unique
  discountPercent Int
  validFrom      DateTime
  validTo        DateTime
  maxRedemptions Int?
  usedCount      Int      @default(0)
  createdAt      DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Quiz {
  id       String     @id @default(cuid())
  lesson   Lesson     @relation(fields: [lessonId], references: [id])
  lessonId String
  title    String
  questions QuizQuestion[]
}

model QuizQuestion {
  id      String @id @default(cuid())
  quiz    Quiz   @relation(fields: [quizId], references: [id])
  quizId  String
  question String
  options String[]
  correctAnswer Int
}

model QuizAnswer {
  id       String @id @default(cuid())
  userId   String
  questionId String
  answer   Int
  isCorrect Boolean
  createdAt DateTime @default(now())
}

enum UserRole {
  STUDENT
  ADMIN
  SUPERADMIN
}

enum LessonType {
  VIDEO
  PDF
  EXAM
}

enum AssetKind {
  PDF
  ATTACHMENT
}

enum CommentStatus {
  VISIBLE
  HIDDEN
  REPORTED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum PaymentProvider {
  BANKILY
  MASRIVI
  SEDAD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ProgressStatus {
  VIEWED
  IN_PROGRESS
}

enum SubscriptionType {
  VIDEOS_ONLY
  DOCUMENTS_ONLY
  FULL_ACCESS
}